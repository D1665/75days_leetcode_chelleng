#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        // Initialize a 3D dp array for memoization
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(3, -1)));
        return solve(0, 1, prices, 0, dp);
    }

    int solve(int ind, int buy, vector<int>& prices, int count, vector<vector<vector<int>>>& dp) {
        if (ind == prices.size())
            return 0;
        if (count == 2)  // Maximum of two transactions
            return 0;
        if (dp[ind][buy][count] != -1)
            return dp[ind][buy][count];

        int profit = 0;
        if (buy == 1) {  // We can buy
            // Two options: buy or not buy
            int op1 = -prices[ind] + solve(ind + 1, 0, prices, count, dp);  // Buy
            int op2 = solve(ind + 1, 1, prices, count, dp);  // Don't buy
            profit = max(op1, op2);
        } else {  // We can sell
            // Two options: sell or not sell
            int op1 = prices[ind] + solve(ind + 1, 1, prices, count + 1, dp);  // Sell
            int op2 = solve(ind + 1, 0, prices, count, dp);  // Don't sell
            profit = max(op1, op2);
        }

        dp[ind][buy][count] = profit;
        return dp[ind][buy][count];
    }
};

// Example usage
// int main() {
//     vector<int> prices = {7, 1, 5, 3, 6, 4};
//     Solution sol;
//     cout << sol.maxProfit(prices);  // Output: 7
//     return 0;
// }
